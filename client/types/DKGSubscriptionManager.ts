/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DKGSubscriptionManagerInterface extends utils.Interface {
  functions: {
    "addConsumer(uint256,address)": FunctionFragment;
    "consumers(address,uint256)": FunctionFragment;
    "createSubscription(uint16,uint32)": FunctionFragment;
    "feeRate()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestPolicy(uint256,string,bytes,bytes,uint16,uint16,uint32,uint32)": FunctionFragment;
    "subscriptions(uint256)": FunctionFragment;
    "sweep(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyingKey()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addConsumer",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "consumers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestPolicy",
    values: [
      BigNumberish,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sweep", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyingKey",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "consumers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyingKey",
    data: BytesLike
  ): Result;

  events: {
    "ConsumerAdded(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PolicyRequested(uint256,address,bytes,bytes,uint16,uint16,uint32,uint32,string)": EventFragment;
    "SubscriptionCreated(uint256,address,uint16,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConsumerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionCreated"): EventFragment;
}

export type ConsumerAddedEvent = TypedEvent<
  [BigNumber, string],
  { subscriptionId: BigNumber; consumer: string }
>;

export type ConsumerAddedEventFilter = TypedEventFilter<ConsumerAddedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PolicyRequestedEvent = TypedEvent<
  [BigNumber, string, string, string, number, number, number, number, string],
  {
    subscriptionId: BigNumber;
    consumer: string;
    verifyingKey: string;
    decryptingKey: string;
    _size: number;
    _threshold: number;
    _startTimestamp: number;
    _endTimestamp: number;
    label: string;
  }
>;

export type PolicyRequestedEventFilter = TypedEventFilter<PolicyRequestedEvent>;

export type SubscriptionCreatedEvent = TypedEvent<
  [BigNumber, string, number, number],
  {
    subscriptionId: BigNumber;
    owner: string;
    dkgNodes: number;
    endTimestamp: number;
  }
>;

export type SubscriptionCreatedEventFilter =
  TypedEventFilter<SubscriptionCreatedEvent>;

export interface DKGSubscriptionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DKGSubscriptionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addConsumer(
      _subscriptionId: BigNumberish,
      _consumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    consumers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createSubscription(
      _dkgNodes: BigNumberish,
      _duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestPolicy(
      _subscriptionId: BigNumberish,
      _labelSuffix: string,
      _verifyingKey: BytesLike,
      _decryptingKey: BytesLike,
      _size: BigNumberish,
      _threshold: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscriptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number] & {
        owner: string;
        dkgNodes: number;
        endTimestamp: number;
        numConsumers: number;
      }
    >;

    sweep(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyingKey(overrides?: CallOverrides): Promise<[string]>;
  };

  addConsumer(
    _subscriptionId: BigNumberish,
    _consumer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  consumers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createSubscription(
    _dkgNodes: BigNumberish,
    _duration: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRate(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestPolicy(
    _subscriptionId: BigNumberish,
    _labelSuffix: string,
    _verifyingKey: BytesLike,
    _decryptingKey: BytesLike,
    _size: BigNumberish,
    _threshold: BigNumberish,
    _startTimestamp: BigNumberish,
    _endTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscriptions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, number] & {
      owner: string;
      dkgNodes: number;
      endTimestamp: number;
      numConsumers: number;
    }
  >;

  sweep(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyingKey(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addConsumer(
      _subscriptionId: BigNumberish,
      _consumer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    consumers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSubscription(
      _dkgNodes: BigNumberish,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestPolicy(
      _subscriptionId: BigNumberish,
      _labelSuffix: string,
      _verifyingKey: BytesLike,
      _decryptingKey: BytesLike,
      _size: BigNumberish,
      _threshold: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { policyId: string; label: string }>;

    subscriptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number] & {
        owner: string;
        dkgNodes: number;
        endTimestamp: number;
        numConsumers: number;
      }
    >;

    sweep(recipient: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyingKey(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ConsumerAdded(uint256,address)"(
      subscriptionId?: BigNumberish | null,
      consumer?: string | null
    ): ConsumerAddedEventFilter;
    ConsumerAdded(
      subscriptionId?: BigNumberish | null,
      consumer?: string | null
    ): ConsumerAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PolicyRequested(uint256,address,bytes,bytes,uint16,uint16,uint32,uint32,string)"(
      subscriptionId?: BigNumberish | null,
      consumer?: string | null,
      verifyingKey?: null,
      decryptingKey?: null,
      _size?: null,
      _threshold?: null,
      _startTimestamp?: null,
      _endTimestamp?: null,
      label?: null
    ): PolicyRequestedEventFilter;
    PolicyRequested(
      subscriptionId?: BigNumberish | null,
      consumer?: string | null,
      verifyingKey?: null,
      decryptingKey?: null,
      _size?: null,
      _threshold?: null,
      _startTimestamp?: null,
      _endTimestamp?: null,
      label?: null
    ): PolicyRequestedEventFilter;

    "SubscriptionCreated(uint256,address,uint16,uint32)"(
      subscriptionId?: BigNumberish | null,
      owner?: string | null,
      dkgNodes?: null,
      endTimestamp?: null
    ): SubscriptionCreatedEventFilter;
    SubscriptionCreated(
      subscriptionId?: BigNumberish | null,
      owner?: string | null,
      dkgNodes?: null,
      endTimestamp?: null
    ): SubscriptionCreatedEventFilter;
  };

  estimateGas: {
    addConsumer(
      _subscriptionId: BigNumberish,
      _consumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    consumers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSubscription(
      _dkgNodes: BigNumberish,
      _duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestPolicy(
      _subscriptionId: BigNumberish,
      _labelSuffix: string,
      _verifyingKey: BytesLike,
      _decryptingKey: BytesLike,
      _size: BigNumberish,
      _threshold: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscriptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sweep(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyingKey(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addConsumer(
      _subscriptionId: BigNumberish,
      _consumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    consumers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createSubscription(
      _dkgNodes: BigNumberish,
      _duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestPolicy(
      _subscriptionId: BigNumberish,
      _labelSuffix: string,
      _verifyingKey: BytesLike,
      _decryptingKey: BytesLike,
      _size: BigNumberish,
      _threshold: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscriptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sweep(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyingKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
