/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PolicyStruct = {
  disabled: boolean;
  sponsor: string;
  owner: string;
  feeRate: BigNumberish;
  startTimestamp: BigNumberish;
  endTimestamp: BigNumberish;
  reservedSlot1: BigNumberish;
  reservedSlot2: BigNumberish;
  reservedSlot3: BigNumberish;
  reservedSlot4: BigNumberish;
  reservedSlot5: BigNumberish;
};

export type PolicyStructOutput = [
  boolean,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  disabled: boolean;
  sponsor: string;
  owner: string;
  feeRate: BigNumber;
  startTimestamp: BigNumber;
  endTimestamp: BigNumber;
  reservedSlot1: BigNumber;
  reservedSlot2: BigNumber;
  reservedSlot3: BigNumber;
  reservedSlot4: BigNumber;
  reservedSlot5: BigNumber;
};

export interface IPolicyManagerInterface extends utils.Interface {
  functions: {
    "calculateRefundValue(bytes16)": FunctionFragment;
    "createPolicy(bytes16,address,uint64,address[])": FunctionFragment;
    "getArrangementsLength(bytes16)": FunctionFragment;
    "getCurrentPeriod()": FunctionFragment;
    "policies(bytes16)": FunctionFragment;
    "revokeArrangement(bytes16,address)": FunctionFragment;
    "revokePolicy(bytes16)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateRefundValue",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicy",
    values: [BytesLike, string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getArrangementsLength",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "policies", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "revokeArrangement",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePolicy",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateRefundValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArrangementsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeArrangement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePolicy",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPolicyManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPolicyManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateRefundValue(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { refundValue: BigNumber }>;

    createPolicy(
      _policyId: BytesLike,
      _policyOwner: string,
      _endTimestamp: BigNumberish,
      _nodes: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getArrangementsLength(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<[number]>;

    policies(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[PolicyStructOutput] & { policy: PolicyStructOutput }>;

    revokeArrangement(
      _policyId: BytesLike,
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokePolicy(
      _policyId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateRefundValue(
    _policyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createPolicy(
    _policyId: BytesLike,
    _policyOwner: string,
    _endTimestamp: BigNumberish,
    _nodes: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getArrangementsLength(
    _policyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentPeriod(overrides?: CallOverrides): Promise<number>;

  policies(
    _policyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<PolicyStructOutput>;

  revokeArrangement(
    _policyId: BytesLike,
    _node: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokePolicy(
    _policyId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateRefundValue(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPolicy(
      _policyId: BytesLike,
      _policyOwner: string,
      _endTimestamp: BigNumberish,
      _nodes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getArrangementsLength(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<number>;

    policies(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PolicyStructOutput>;

    revokeArrangement(
      _policyId: BytesLike,
      _node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokePolicy(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calculateRefundValue(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPolicy(
      _policyId: BytesLike,
      _policyOwner: string,
      _endTimestamp: BigNumberish,
      _nodes: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getArrangementsLength(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    policies(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeArrangement(
      _policyId: BytesLike,
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokePolicy(
      _policyId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateRefundValue(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPolicy(
      _policyId: BytesLike,
      _policyOwner: string,
      _endTimestamp: BigNumberish,
      _nodes: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getArrangementsLength(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policies(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeArrangement(
      _policyId: BytesLike,
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokePolicy(
      _policyId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
