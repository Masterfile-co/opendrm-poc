/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AbioticAliceManagerInterface extends utils.Interface {
  functions: {
    "fulfillPolicy(bytes16,uint64,uint256,address[])": FunctionFragment;
    "policyIdToRequestor(bytes16)": FunctionFragment;
    "registerMe(bytes,bytes)": FunctionFragment;
    "registry(address)": FunctionFragment;
    "requestPolicy(string,address,uint256,uint256,uint256)": FunctionFragment;
    "verifyingKey()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "fulfillPolicy",
    values: [BytesLike, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "policyIdToRequestor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMe",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "requestPolicy",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyingKey",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "fulfillPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyIdToRequestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registerMe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyingKey",
    data: BytesLike
  ): Result;

  events: {
    "PolicyRequested(address,address,uint256,uint256,uint256,string)": EventFragment;
    "UserRegistered(address,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PolicyRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRegistered"): EventFragment;
}

export type PolicyRequestedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  {
    requestor: string;
    recipient: string;
    threshold: BigNumber;
    shares: BigNumber;
    paymentPeriods: BigNumber;
    label: string;
  }
>;

export type PolicyRequestedEventFilter = TypedEventFilter<PolicyRequestedEvent>;

export type UserRegisteredEvent = TypedEvent<
  [string, string, string],
  { user: string; verifyingKey: string; decryptingKey: string }
>;

export type UserRegisteredEventFilter = TypedEventFilter<UserRegisteredEvent>;

export interface AbioticAliceManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbioticAliceManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fulfillPolicy(
      _policyId: BytesLike,
      _endTimestamp: BigNumberish,
      _valueInWei: BigNumberish,
      _nodes: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    policyIdToRequestor(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerMe(
      _bobVerifyingKey: BytesLike,
      _bobDecryptingKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { bobVerifyingKey: string; bobDecryptingKey: string }
    >;

    requestPolicy(
      _labelSuffix: string,
      _recipient: string,
      _threshold: BigNumberish,
      _shares: BigNumberish,
      _paymentPeriods: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyingKey(overrides?: CallOverrides): Promise<[string]>;
  };

  fulfillPolicy(
    _policyId: BytesLike,
    _endTimestamp: BigNumberish,
    _valueInWei: BigNumberish,
    _nodes: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  policyIdToRequestor(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  registerMe(
    _bobVerifyingKey: BytesLike,
    _bobDecryptingKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registry(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { bobVerifyingKey: string; bobDecryptingKey: string }
  >;

  requestPolicy(
    _labelSuffix: string,
    _recipient: string,
    _threshold: BigNumberish,
    _shares: BigNumberish,
    _paymentPeriods: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyingKey(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    fulfillPolicy(
      _policyId: BytesLike,
      _endTimestamp: BigNumberish,
      _valueInWei: BigNumberish,
      _nodes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    policyIdToRequestor(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    registerMe(
      _bobVerifyingKey: BytesLike,
      _bobDecryptingKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { bobVerifyingKey: string; bobDecryptingKey: string }
    >;

    requestPolicy(
      _labelSuffix: string,
      _recipient: string,
      _threshold: BigNumberish,
      _shares: BigNumberish,
      _paymentPeriods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyingKey(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "PolicyRequested(address,address,uint256,uint256,uint256,string)"(
      requestor?: string | null,
      recipient?: string | null,
      threshold?: null,
      shares?: null,
      paymentPeriods?: null,
      label?: null
    ): PolicyRequestedEventFilter;
    PolicyRequested(
      requestor?: string | null,
      recipient?: string | null,
      threshold?: null,
      shares?: null,
      paymentPeriods?: null,
      label?: null
    ): PolicyRequestedEventFilter;

    "UserRegistered(address,bytes,bytes)"(
      user?: string | null,
      verifyingKey?: null,
      decryptingKey?: null
    ): UserRegisteredEventFilter;
    UserRegistered(
      user?: string | null,
      verifyingKey?: null,
      decryptingKey?: null
    ): UserRegisteredEventFilter;
  };

  estimateGas: {
    fulfillPolicy(
      _policyId: BytesLike,
      _endTimestamp: BigNumberish,
      _valueInWei: BigNumberish,
      _nodes: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    policyIdToRequestor(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerMe(
      _bobVerifyingKey: BytesLike,
      _bobDecryptingKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registry(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    requestPolicy(
      _labelSuffix: string,
      _recipient: string,
      _threshold: BigNumberish,
      _shares: BigNumberish,
      _paymentPeriods: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyingKey(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fulfillPolicy(
      _policyId: BytesLike,
      _endTimestamp: BigNumberish,
      _valueInWei: BigNumberish,
      _nodes: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    policyIdToRequestor(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerMe(
      _bobVerifyingKey: BytesLike,
      _bobDecryptingKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestPolicy(
      _labelSuffix: string,
      _recipient: string,
      _threshold: BigNumberish,
      _shares: BigNumberish,
      _paymentPeriods: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyingKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
