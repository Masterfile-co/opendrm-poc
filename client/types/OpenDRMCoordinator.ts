/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OpenDRMCoordinatorInterface extends utils.Interface {
  functions: {
    "checkRegistry(address)": FunctionFragment;
    "deployOpenDRM(string,string)": FunctionFragment;
    "dkgManager()": FunctionFragment;
    "getNextDeployment()": FunctionFragment;
    "odrm721Implementation()": FunctionFragment;
    "preManager()": FunctionFragment;
    "register(string,string)": FunctionFragment;
    "registry(address)": FunctionFragment;
    "subscriptionId()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployOpenDRM",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dkgManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextDeployment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "odrm721Implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "registry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployOpenDRM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dkgManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextDeployment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "odrm721Implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "preManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OpenDRMCoordinator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OpenDRMCoordinatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkRegistry(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployOpenDRM(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dkgManager(overrides?: CallOverrides): Promise<[string]>;

    getNextDeployment(
      overrides?: CallOverrides
    ): Promise<[string] & { deployment: string }>;

    odrm721Implementation(overrides?: CallOverrides): Promise<[string]>;

    preManager(overrides?: CallOverrides): Promise<[string]>;

    register(
      _verifyingKey: string,
      _decryptingKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { verifyingKey: string; decryptingKey: string }
    >;

    subscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  checkRegistry(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployOpenDRM(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dkgManager(overrides?: CallOverrides): Promise<string>;

  getNextDeployment(overrides?: CallOverrides): Promise<string>;

  odrm721Implementation(overrides?: CallOverrides): Promise<string>;

  preManager(overrides?: CallOverrides): Promise<string>;

  register(
    _verifyingKey: string,
    _decryptingKey: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registry(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { verifyingKey: string; decryptingKey: string }
  >;

  subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    checkRegistry(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { verifyingKey: string; decryptingKey: string }
    >;

    deployOpenDRM(
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dkgManager(overrides?: CallOverrides): Promise<string>;

    getNextDeployment(overrides?: CallOverrides): Promise<string>;

    odrm721Implementation(overrides?: CallOverrides): Promise<string>;

    preManager(overrides?: CallOverrides): Promise<string>;

    register(
      _verifyingKey: string,
      _decryptingKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { verifyingKey: string; decryptingKey: string }
    >;

    subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    checkRegistry(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployOpenDRM(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dkgManager(overrides?: CallOverrides): Promise<BigNumber>;

    getNextDeployment(overrides?: CallOverrides): Promise<BigNumber>;

    odrm721Implementation(overrides?: CallOverrides): Promise<BigNumber>;

    preManager(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      _verifyingKey: string,
      _decryptingKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registry(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkRegistry(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployOpenDRM(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dkgManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextDeployment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    odrm721Implementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      _verifyingKey: string,
      _decryptingKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscriptionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
