{
  "address": "0x763f641579e3ea3f88a478fBD020003cdcF90f96",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_verifyingKey",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fundsRequired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundsProvided",
          "type": "uint256"
        }
      ],
      "name": "InvalidFunding",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "NotSubscriptionConsumer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "NotSubscriptionOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionExpired",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "ConsumerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "verifyingKey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "decryptingKey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_size",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_threshold",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_startTimestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_endTimestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "name": "PolicyRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "dkgNodes",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "endTimestamp",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "addConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "consumers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dkgNodes",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_duration",
          "type": "uint32"
        }
      ],
      "name": "createSubscription",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_labelSuffix",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_verifyingKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_decryptingKey",
          "type": "bytes"
        },
        {
          "internalType": "uint16",
          "name": "_size",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_threshold",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_startTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_endTimestamp",
          "type": "uint32"
        }
      ],
      "name": "requestPolicy",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "policyId",
          "type": "bytes16"
        },
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "subscriptions",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "dkgNodes",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "endTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "numConsumers",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifyingKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcaa605f09098f13474c17af1de3198129d00753f686f92240cb73318480f278b",
  "receipt": {
    "to": null,
    "from": "0x0929120c9c54cC768C55E4754128744322fC39D7",
    "contractAddress": "0x763f641579e3ea3f88a478fBD020003cdcF90f96",
    "transactionIndex": 12,
    "gasUsed": "2025437",
    "logsBloom": "0x
    "blockHash": "0x1672eb4c90d3259b3ed9d0d578a57f9207abb4488953fb34be9e79b04768e859",
    "transactionHash": "0xcaa605f09098f13474c17af1de3198129d00753f686f92240cb73318480f278b",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 25949899,
        "transactionHash": "0xcaa605f09098f13474c17af1de3198129d00753f686f92240cb73318480f278b",
        "address": "0x763f641579e3ea3f88a478fBD020003cdcF90f96",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000929120c9c54cc768c55e4754128744322fc39d7"
        ],
        "data": "0x",
        "logIndex": 160,
        "blockHash": "0x1672eb4c90d3259b3ed9d0d578a57f9207abb4488953fb34be9e79b04768e859"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 25949899,
        "transactionHash": "0xcaa605f09098f13474c17af1de3198129d00753f686f92240cb73318480f278b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000929120c9c54cc768c55e4754128744322fc39d7",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000008fea7bfbf65ed600000000000000000000000000000000000000000000000008530dd3f265854000000000000000000000000000000000000000000000110816ee96975b6736ce00000000000000000000000000000000000000000000000007c32357f66f266a000000000000000000000000000000000000000000001108177e8113575d95a4",
        "logIndex": 161,
        "blockHash": "0x1672eb4c90d3259b3ed9d0d578a57f9207abb4488953fb34be9e79b04768e859"
      }
    ],
    "blockNumber": 25949899,
    "cumulativeGasUsed": "5604113",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x036bd8188183e5c251065d1b22cb52c20f31a88fbf01b1eb75b5cbd5896d76c3e0",
    1000000000
  ],
  "solcInputHash": "adde69f235722b4842150f62dcf3cc98",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_verifyingKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundsRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundsProvided\",\"type\":\"uint256\"}],\"name\":\"InvalidFunding\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotSubscriptionConsumer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotSubscriptionOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"}],\"name\":\"SubscriptionExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"ConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"verifyingKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"decryptingKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_size\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_threshold\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_startTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_endTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"PolicyRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"dkgNodes\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"consumers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dkgNodes\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"}],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_labelSuffix\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_verifyingKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_decryptingKey\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"_size\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_threshold\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_endTimestamp\",\"type\":\"uint32\"}],\"name\":\"requestPolicy\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"policyId\",\"type\":\"bytes16\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"dkgNodes\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"numConsumers\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyingKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestPolicy(uint256,string,bytes,bytes,uint16,uint16,uint32,uint32)\":{\"details\":\"consumer is responsible for making sure that these parameters line up withpolcy created on PRE SubscriptionManager\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/DKGSubscriptionManager.sol\":\"DKGSubscriptionManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/LibNuCypher.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.13;\\n\\nlibrary LibNuCypher {\\n    function toPolicyId(\\n        string memory label,\\n        bytes memory aliceVerifyingKey,\\n        bytes memory bobVerifyingKey\\n    ) internal pure returns (bytes16 policyId) {\\n        return\\n            bytes16(\\n                keccak256(\\n                    abi.encodePacked(aliceVerifyingKey, bobVerifyingKey, label)\\n                )\\n            );\\n    }\\n\\n    function toLabel(string memory labelSuffix, address requestor)\\n        internal\\n        view\\n        returns (string memory label)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _toString(requestor),\\n                    _toString(block.chainid),\\n                    labelSuffix\\n                )\\n            );\\n    }\\n\\n    function _toString(address addr) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(addr)));\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(42);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < 20; i++) {\\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x9c529e092d2a999f8dbc0bf64c638f6e2b81c748eafcad88a05f2af4d4a635cc\",\"license\":\"AGPL-3.0\"},\"contracts/v2/DKGSubscriptionManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {LibNuCypher} from \\\"../LibNuCypher.sol\\\";\\n\\ncontract DKGSubscriptionManager is Ownable {\\n    using LibNuCypher for string;\\n\\n    // ERRORS\\n    error NotSubscriptionOwner(uint256 subscriptionId, address caller);\\n    error NotSubscriptionConsumer(uint256 subscriptionId, address caller);\\n    error InvalidFunding(uint256 fundsRequired, uint256 fundsProvided);\\n    error SubscriptionExpired(uint256 subscriptionId);\\n\\n    // EVENTS\\n    event SubscriptionCreated(\\n        uint256 indexed subscriptionId,\\n        address indexed owner,\\n        uint16 dkgNodes,\\n        uint32 endTimestamp\\n    );\\n    event ConsumerAdded(\\n        uint256 indexed subscriptionId,\\n        address indexed consumer\\n    );\\n    event PolicyRequested(\\n        uint256 indexed subscriptionId,\\n        address indexed consumer,\\n        bytes verifyingKey,\\n        bytes decryptingKey,\\n        uint16 _size,\\n        uint16 _threshold,\\n        uint32 _startTimestamp,\\n        uint32 _endTimestamp,\\n        string label\\n    );\\n\\n    // TODO: Pack Struct\\n    struct SubscriptionConfig {\\n        address payable owner;\\n        // Security level of dkg\\n        uint16 dkgNodes;\\n        // When subscription ends\\n        uint32 endTimestamp;\\n        uint16 numConsumers;\\n    }\\n\\n    struct PolicyRequest {\\n        bytes16 policyId;\\n        // TODO: Check the size of these keys\\n        bytes verifyingKey;\\n        bytes decryptingKey;\\n        uint32 startTimestamp;\\n        uint32 endTimestamp;\\n    }\\n\\n    bytes public verifyingKey;\\n    // Per-second, per-node service fee rate\\n    uint256 public feeRate;\\n    uint256 internal subscriptionNonce;\\n\\n    mapping(uint256 => SubscriptionConfig) public subscriptions;\\n    mapping(address => mapping(uint256 => uint256)) public consumers;\\n\\n    modifier onlySubscriber(uint256 _subscriptionId) {\\n        if (subscriptions[_subscriptionId].owner != msg.sender) {\\n            revert NotSubscriptionOwner(_subscriptionId, msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyConsumer(uint256 _subscriptiondId) {\\n        if (consumers[msg.sender][_subscriptiondId] == 0) {\\n            revert NotSubscriptionConsumer(_subscriptiondId, msg.sender);\\n        }\\n        _;\\n    }\\n\\n    constructor(bytes memory _verifyingKey, uint256 _feeRate) {\\n        verifyingKey = _verifyingKey;\\n        feeRate = _feeRate;\\n    }\\n\\n    function createSubscription(\\n        uint16 _dkgNodes,\\n        // Duration of subscription\\n        uint32 _duration\\n    ) external payable returns (uint256 subscriptionId) {\\n        // TODO: Check payment\\n        uint256 requiredPayment = _dkgNodes * _duration * feeRate;\\n\\n        if (requiredPayment != msg.value) {\\n            revert InvalidFunding(requiredPayment, msg.value);\\n        }\\n\\n        uint32 endTimestamp = uint32(block.timestamp + _duration);\\n\\n        // Save config\\n        subscriptions[subscriptionNonce] = SubscriptionConfig(\\n            payable(msg.sender),\\n            _dkgNodes,\\n            endTimestamp,\\n            1\\n        );\\n        // Add owner as consumer\\n        consumers[msg.sender][subscriptionNonce] = 1;\\n\\n        subscriptionNonce += 1;\\n        emit SubscriptionCreated(\\n            subscriptionId,\\n            msg.sender,\\n            _dkgNodes,\\n            endTimestamp\\n        );\\n        emit ConsumerAdded(subscriptionId, msg.sender);\\n    }\\n\\n    // function extendSubscription(uint256 _subscriptionId, uint256 _duration)\\n    //     external\\n    //     payable\\n    //     onlySubscriber(_subscriptionId)\\n    // {\\n    //     // TODO: Emit Event\\n    // }\\n\\n    /**\\n     *\\n     */\\n    function addConsumer(uint256 _subscriptionId, address _consumer)\\n        external\\n        onlySubscriber(_subscriptionId)\\n    {\\n        // TODO: Set max consumers per subscription\\n        consumers[_consumer][_subscriptionId] = 1;\\n        subscriptions[_subscriptionId].numConsumers += 1;\\n\\n        emit ConsumerAdded(_subscriptionId, _consumer);\\n    }\\n\\n    /**\\n     * @dev consumer is responsible for making sure that these parameters line up with\\n     * @dev polcy created on PRE SubscriptionManager\\n     */\\n    function requestPolicy(\\n        uint256 _subscriptionId,\\n        string memory _labelSuffix,\\n        // TODO: Check the size of these keys\\n        bytes calldata _verifyingKey,\\n        bytes calldata _decryptingKey,\\n        uint16 _size,\\n        uint16 _threshold,\\n        uint32 _startTimestamp,\\n        uint32 _endTimestamp\\n    )\\n        external\\n        onlyConsumer(_subscriptionId)\\n        returns (bytes16 policyId, string memory label)\\n    {\\n        if (subscriptions[_subscriptionId].endTimestamp < block.timestamp) {\\n            revert SubscriptionExpired(_subscriptionId);\\n        }\\n\\n        // Requestor provides a uuid for their label. We append it to the  \\n        // requesting address so we dont get conflicting labels\\n        label = _labelSuffix.toLabel(msg.sender);\\n        \\n        // Derive the policy id by hashing label, alice verifying key, and bob verifying key\\n        // This doesn't technically need to be on chain but is a big convience since\\n        // the user will most likely directly call the PRE createPolicy method after this.\\n        policyId = label.toPolicyId(verifyingKey, _verifyingKey);\\n\\n        emit PolicyRequested(\\n            _subscriptionId,\\n            msg.sender,\\n            _verifyingKey,\\n            _decryptingKey,\\n            _size,\\n            _threshold,\\n            _startTimestamp,\\n            _endTimestamp,\\n            label\\n        );\\n    }\\n\\n    function sweep(address payable recipient) external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        (bool sent, ) = recipient.call{value: balance}(\\\"\\\");\\n        require(sent, \\\"Failed transfer\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5af25b2b50a60b538f352cc1c831569618a1a8a8db790d6a526dad76699954ca\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002619380380620026198339818101604052810190620000379190620003d3565b620000576200004b6200007f60201b60201c565b6200008760201b60201c565b81600190805190602001906200006f9291906200014b565b508060028190555050506200049d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001599062000468565b90600052602060002090601f0160209004810192826200017d5760008555620001c9565b82601f106200019857805160ff1916838001178555620001c9565b82800160010185558215620001c9579182015b82811115620001c8578251825591602001919060010190620001ab565b5b509050620001d89190620001dc565b5090565b5b80821115620001f7576000816000905550600101620001dd565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002648262000219565b810181811067ffffffffffffffff821117156200028657620002856200022a565b5b80604052505050565b60006200029b620001fb565b9050620002a9828262000259565b919050565b600067ffffffffffffffff821115620002cc57620002cb6200022a565b5b620002d78262000219565b9050602081019050919050565b60005b8381101562000304578082015181840152602081019050620002e7565b8381111562000314576000848401525b50505050565b6000620003316200032b84620002ae565b6200028f565b90508281526020810184848401111562000350576200034f62000214565b5b6200035d848285620002e4565b509392505050565b600082601f8301126200037d576200037c6200020f565b5b81516200038f8482602086016200031a565b91505092915050565b6000819050919050565b620003ad8162000398565b8114620003b957600080fd5b50565b600081519050620003cd81620003a2565b92915050565b60008060408385031215620003ed57620003ec62000205565b5b600083015167ffffffffffffffff8111156200040e576200040d6200020a565b5b6200041c8582860162000365565b92505060206200042f85828601620003bc565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200048157607f821691505b60208210810362000497576200049662000439565b5b50919050565b61216c80620004ad6000396000f3fe60806040526004361061009c5760003560e01c8063869241fb11610064578063869241fb1461017c5780638da5cb5b146101ba578063978bbdb9146101e5578063add6f41e14610210578063bec4c08c1461024d578063f2fde38b146102765761009c565b806301681a62146100a15780632d5bbf60146100ca57806366a699a11461010a578063715018a61461013a5780637950c5f814610151575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c3919061137c565b61029f565b005b3480156100d657600080fd5b506100f160048036038101906100ec91906113df565b6103d1565b6040516101019493929190611457565b60405180910390f35b610124600480360381019061011f91906114f4565b61044d565b6040516101319190611543565b60405180910390f35b34801561014657600080fd5b5061014f6106f2565b005b34801561015d57600080fd5b5061016661077a565b60405161017391906115f7565b60405180910390f35b34801561018857600080fd5b506101a3600480360381019061019e91906117ae565b610808565b6040516101b1929190611951565b60405180910390f35b3480156101c657600080fd5b506101cf610a7e565b6040516101dc91906119a2565b60405180910390f35b3480156101f157600080fd5b506101fa610aa7565b6040516102079190611543565b60405180910390f35b34801561021c57600080fd5b50610237600480360381019061023291906119e9565b610aad565b6040516102449190611543565b60405180910390f35b34801561025957600080fd5b50610274600480360381019061026f9190611a29565b610ad2565b005b34801561028257600080fd5b5061029d60048036038101906102989190611a69565b610c68565b005b6102a7610d5f565b73ffffffffffffffffffffffffffffffffffffffff166102c5610a7e565b73ffffffffffffffffffffffffffffffffffffffff161461031b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031290611ae2565b60405180910390fd5b600047905060008273ffffffffffffffffffffffffffffffffffffffff168260405161034690611b33565b60006040518083038185875af1925050503d8060008114610383576040519150601f19603f3d011682016040523d82523d6000602084013e610388565b606091505b50509050806103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c390611b94565b60405180910390fd5b505050565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900461ffff16908060000160169054906101000a900463ffffffff169080600001601a9054906101000a900461ffff16905084565b600080600254838561ffff166104639190611be3565b63ffffffff166104739190611c21565b90503481146104bb5780346040517f69723a660000000000000000000000000000000000000000000000000000000081526004016104b2929190611c7b565b60405180910390fd5b60008363ffffffff16426104cf9190611ca4565b905060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1681526020018263ffffffff168152602001600161ffff1681525060046000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548161ffff021916908361ffff16021790555060408201518160000160166101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601a6101000a81548161ffff021916908361ffff1602179055509050506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060035481526020019081526020016000208190555060016003600082825461064e9190611ca4565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16837f196ce8f4a280af33a10508cd782ec513d21671e20b0d59ce80fc3ffc28259bb0878460405161069e929190611cfa565b60405180910390a33373ffffffffffffffffffffffffffffffffffffffff16837f4e5aab67fb6878a7c5437d638d002992f2b503107c053f38483f6b294948749360405160405180910390a3505092915050565b6106fa610d5f565b73ffffffffffffffffffffffffffffffffffffffff16610718610a7e565b73ffffffffffffffffffffffffffffffffffffffff161461076e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076590611ae2565b60405180910390fd5b6107786000610d67565b565b6001805461078790611d52565b80601f01602080910402602001604051908101604052809291908181526020018280546107b390611d52565b80156108005780601f106107d557610100808354040283529160200191610800565b820191906000526020600020905b8154815290600101906020018083116107e357829003601f168201915b505050505081565b600060608b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054036108a45780336040517f760befb600000000000000000000000000000000000000000000000000000000815260040161089b929190611d83565b60405180910390fd5b42600460008f815260200190815260200160002060000160169054906101000a900463ffffffff1663ffffffff161015610915578c6040517f3ba88dbd00000000000000000000000000000000000000000000000000000000815260040161090c9190611543565b60405180910390fd5b610928338d610e2b90919063ffffffff16565b9150610a0d6001805461093a90611d52565b80601f016020809104026020016040519081016040528092919081815260200182805461096690611d52565b80156109b35780601f10610988576101008083540402835291602001916109b3565b820191906000526020600020905b81548152906001019060200180831161099657829003601f168201915b50505050508c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505084610e699092919063ffffffff16565b92503373ffffffffffffffffffffffffffffffffffffffff168d7f4ab486d2197ae1ef56ae95222694a4f9d334ec3da023d74bae2cf7242dfab5948d8d8d8d8d8d8d8d8c604051610a6699989796959493929190611dd9565b60405180910390a3509a509a98505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60025481565b6005602052816000526040600020602052806000526040600020600091509150505481565b813373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b7b5780336040517f55f541b9000000000000000000000000000000000000000000000000000000008152600401610b72929190611d83565b60405180910390fd5b6001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002081905550600160046000858152602001908152602001600020600001601a8282829054906101000a900461ffff16610c059190611e61565b92506101000a81548161ffff021916908361ffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16837f4e5aab67fb6878a7c5437d638d002992f2b503107c053f38483f6b294948749360405160405180910390a3505050565b610c70610d5f565b73ffffffffffffffffffffffffffffffffffffffff16610c8e610a7e565b73ffffffffffffffffffffffffffffffffffffffff1614610ce4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdb90611ae2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4a90611f0b565b60405180910390fd5b610d5c81610d67565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060610e3682610e9f565b610e3f466111aa565b84604051602001610e5293929190611f67565b604051602081830303815290604052905092915050565b6000828285604051602001610e8093929190611fc9565b6040516020818303038152906040528051906020012090509392505050565b606060008273ffffffffffffffffffffffffffffffffffffffff1660001b905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000602a67ffffffffffffffff811115610f1657610f15611623565b5b6040519080825280601f01601f191660200182016040528015610f485781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610f8057610f7f611ffa565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610fe457610fe3611ffa565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b601481101561119e5782600485600c846110309190611ca4565b6020811061104157611040611ffa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff16815181106110805761107f611ffa565b5b602001015160f81c60f81b826002836110999190611c21565b60026110a59190611ca4565b815181106110b6576110b5611ffa565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85600c846110f99190611ca4565b6020811061110a57611109611ffa565b5b1a60f81b1660f81c60ff168151811061112657611125611ffa565b5b602001015160f81c60f81b8260028361113f9190611c21565b600361114b9190611ca4565b8151811061115c5761115b611ffa565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061119690612029565b915050611016565b50809350505050919050565b6060600082036111f1576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611305565b600082905060005b6000821461122357808061120c90612029565b915050600a8261121c91906120a0565b91506111f9565b60008167ffffffffffffffff81111561123f5761123e611623565b5b6040519080825280601f01601f1916602001820160405280156112715781602001600182028036833780820191505090505b5090505b600085146112fe5760018261128a91906120d1565b9150600a856112999190612105565b60306112a59190611ca4565b60f81b8183815181106112bb576112ba611ffa565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856112f791906120a0565b9450611275565b8093505050505b919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113498261131e565b9050919050565b6113598161133e565b811461136457600080fd5b50565b60008135905061137681611350565b92915050565b60006020828403121561139257611391611314565b5b60006113a084828501611367565b91505092915050565b6000819050919050565b6113bc816113a9565b81146113c757600080fd5b50565b6000813590506113d9816113b3565b92915050565b6000602082840312156113f5576113f4611314565b5b6000611403848285016113ca565b91505092915050565b6114158161133e565b82525050565b600061ffff82169050919050565b6114328161141b565b82525050565b600063ffffffff82169050919050565b61145181611438565b82525050565b600060808201905061146c600083018761140c565b6114796020830186611429565b6114866040830185611448565b6114936060830184611429565b95945050505050565b6114a58161141b565b81146114b057600080fd5b50565b6000813590506114c28161149c565b92915050565b6114d181611438565b81146114dc57600080fd5b50565b6000813590506114ee816114c8565b92915050565b6000806040838503121561150b5761150a611314565b5b6000611519858286016114b3565b925050602061152a858286016114df565b9150509250929050565b61153d816113a9565b82525050565b60006020820190506115586000830184611534565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561159857808201518184015260208101905061157d565b838111156115a7576000848401525b50505050565b6000601f19601f8301169050919050565b60006115c98261155e565b6115d38185611569565b93506115e381856020860161157a565b6115ec816115ad565b840191505092915050565b6000602082019050818103600083015261161181846115be565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61165b826115ad565b810181811067ffffffffffffffff8211171561167a57611679611623565b5b80604052505050565b600061168d61130a565b90506116998282611652565b919050565b600067ffffffffffffffff8211156116b9576116b8611623565b5b6116c2826115ad565b9050602081019050919050565b82818337600083830152505050565b60006116f16116ec8461169e565b611683565b90508281526020810184848401111561170d5761170c61161e565b5b6117188482856116cf565b509392505050565b600082601f83011261173557611734611619565b5b81356117458482602086016116de565b91505092915050565b600080fd5b600080fd5b60008083601f84011261176e5761176d611619565b5b8235905067ffffffffffffffff81111561178b5761178a61174e565b5b6020830191508360018202830111156117a7576117a6611753565b5b9250929050565b6000806000806000806000806000806101008b8d0312156117d2576117d1611314565b5b60006117e08d828e016113ca565b9a505060208b013567ffffffffffffffff81111561180157611800611319565b5b61180d8d828e01611720565b99505060408b013567ffffffffffffffff81111561182e5761182d611319565b5b61183a8d828e01611758565b985098505060608b013567ffffffffffffffff81111561185d5761185c611319565b5b6118698d828e01611758565b9650965050608061187c8d828e016114b3565b94505060a061188d8d828e016114b3565b93505060c061189e8d828e016114df565b92505060e06118af8d828e016114df565b9150509295989b9194979a5092959850565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6118f6816118c1565b82525050565b600081519050919050565b600082825260208201905092915050565b6000611923826118fc565b61192d8185611907565b935061193d81856020860161157a565b611946816115ad565b840191505092915050565b600060408201905061196660008301856118ed565b81810360208301526119788184611918565b90509392505050565b600061198c8261131e565b9050919050565b61199c81611981565b82525050565b60006020820190506119b76000830184611993565b92915050565b6119c681611981565b81146119d157600080fd5b50565b6000813590506119e3816119bd565b92915050565b60008060408385031215611a00576119ff611314565b5b6000611a0e858286016119d4565b9250506020611a1f858286016113ca565b9150509250929050565b60008060408385031215611a4057611a3f611314565b5b6000611a4e858286016113ca565b9250506020611a5f858286016119d4565b9150509250929050565b600060208284031215611a7f57611a7e611314565b5b6000611a8d848285016119d4565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611acc602083611907565b9150611ad782611a96565b602082019050919050565b60006020820190508181036000830152611afb81611abf565b9050919050565b600081905092915050565b50565b6000611b1d600083611b02565b9150611b2882611b0d565b600082019050919050565b6000611b3e82611b10565b9150819050919050565b7f4661696c6564207472616e736665720000000000000000000000000000000000600082015250565b6000611b7e600f83611907565b9150611b8982611b48565b602082019050919050565b60006020820190508181036000830152611bad81611b71565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611bee82611438565b9150611bf983611438565b92508163ffffffff0483118215151615611c1657611c15611bb4565b5b828202905092915050565b6000611c2c826113a9565b9150611c37836113a9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c7057611c6f611bb4565b5b828202905092915050565b6000604082019050611c906000830185611534565b611c9d6020830184611534565b9392505050565b6000611caf826113a9565b9150611cba836113a9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611cef57611cee611bb4565b5b828201905092915050565b6000604082019050611d0f6000830185611429565b611d1c6020830184611448565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d6a57607f821691505b602082108103611d7d57611d7c611d23565b5b50919050565b6000604082019050611d986000830185611534565b611da56020830184611993565b9392505050565b6000611db88385611569565b9350611dc58385846116cf565b611dce836115ad565b840190509392505050565b600060e0820190508181036000830152611df4818b8d611dac565b90508181036020830152611e0981898b611dac565b9050611e186040830188611429565b611e256060830187611429565b611e326080830186611448565b611e3f60a0830185611448565b81810360c0830152611e518184611918565b90509a9950505050505050505050565b6000611e6c8261141b565b9150611e778361141b565b92508261ffff03821115611e8e57611e8d611bb4565b5b828201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ef5602683611907565b9150611f0082611e99565b604082019050919050565b60006020820190508181036000830152611f2481611ee8565b9050919050565b600081905092915050565b6000611f41826118fc565b611f4b8185611f2b565b9350611f5b81856020860161157a565b80840191505092915050565b6000611f738286611f36565b9150611f7f8285611f36565b9150611f8b8284611f36565b9150819050949350505050565b6000611fa38261155e565b611fad8185611b02565b9350611fbd81856020860161157a565b80840191505092915050565b6000611fd58286611f98565b9150611fe18285611f98565b9150611fed8284611f36565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612034826113a9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361206657612065611bb4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006120ab826113a9565b91506120b6836113a9565b9250826120c6576120c5612071565b5b828204905092915050565b60006120dc826113a9565b91506120e7836113a9565b9250828210156120fa576120f9611bb4565b5b828203905092915050565b6000612110826113a9565b915061211b836113a9565b92508261212b5761212a612071565b5b82820690509291505056fea2646970667358221220f40f7021fac8f6c859f364e8a885a78582444dfd602b96614dfcc2b33a4ae3f664736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c8063869241fb11610064578063869241fb1461017c5780638da5cb5b146101ba578063978bbdb9146101e5578063add6f41e14610210578063bec4c08c1461024d578063f2fde38b146102765761009c565b806301681a62146100a15780632d5bbf60146100ca57806366a699a11461010a578063715018a61461013a5780637950c5f814610151575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c3919061137c565b61029f565b005b3480156100d657600080fd5b506100f160048036038101906100ec91906113df565b6103d1565b6040516101019493929190611457565b60405180910390f35b610124600480360381019061011f91906114f4565b61044d565b6040516101319190611543565b60405180910390f35b34801561014657600080fd5b5061014f6106f2565b005b34801561015d57600080fd5b5061016661077a565b60405161017391906115f7565b60405180910390f35b34801561018857600080fd5b506101a3600480360381019061019e91906117ae565b610808565b6040516101b1929190611951565b60405180910390f35b3480156101c657600080fd5b506101cf610a7e565b6040516101dc91906119a2565b60405180910390f35b3480156101f157600080fd5b506101fa610aa7565b6040516102079190611543565b60405180910390f35b34801561021c57600080fd5b50610237600480360381019061023291906119e9565b610aad565b6040516102449190611543565b60405180910390f35b34801561025957600080fd5b50610274600480360381019061026f9190611a29565b610ad2565b005b34801561028257600080fd5b5061029d60048036038101906102989190611a69565b610c68565b005b6102a7610d5f565b73ffffffffffffffffffffffffffffffffffffffff166102c5610a7e565b73ffffffffffffffffffffffffffffffffffffffff161461031b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031290611ae2565b60405180910390fd5b600047905060008273ffffffffffffffffffffffffffffffffffffffff168260405161034690611b33565b60006040518083038185875af1925050503d8060008114610383576040519150601f19603f3d011682016040523d82523d6000602084013e610388565b606091505b50509050806103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c390611b94565b60405180910390fd5b505050565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900461ffff16908060000160169054906101000a900463ffffffff169080600001601a9054906101000a900461ffff16905084565b600080600254838561ffff166104639190611be3565b63ffffffff166104739190611c21565b90503481146104bb5780346040517f69723a660000000000000000000000000000000000000000000000000000000081526004016104b2929190611c7b565b60405180910390fd5b60008363ffffffff16426104cf9190611ca4565b905060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1681526020018263ffffffff168152602001600161ffff1681525060046000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548161ffff021916908361ffff16021790555060408201518160000160166101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601a6101000a81548161ffff021916908361ffff1602179055509050506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060035481526020019081526020016000208190555060016003600082825461064e9190611ca4565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16837f196ce8f4a280af33a10508cd782ec513d21671e20b0d59ce80fc3ffc28259bb0878460405161069e929190611cfa565b60405180910390a33373ffffffffffffffffffffffffffffffffffffffff16837f4e5aab67fb6878a7c5437d638d002992f2b503107c053f38483f6b294948749360405160405180910390a3505092915050565b6106fa610d5f565b73ffffffffffffffffffffffffffffffffffffffff16610718610a7e565b73ffffffffffffffffffffffffffffffffffffffff161461076e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076590611ae2565b60405180910390fd5b6107786000610d67565b565b6001805461078790611d52565b80601f01602080910402602001604051908101604052809291908181526020018280546107b390611d52565b80156108005780601f106107d557610100808354040283529160200191610800565b820191906000526020600020905b8154815290600101906020018083116107e357829003601f168201915b505050505081565b600060608b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054036108a45780336040517f760befb600000000000000000000000000000000000000000000000000000000815260040161089b929190611d83565b60405180910390fd5b42600460008f815260200190815260200160002060000160169054906101000a900463ffffffff1663ffffffff161015610915578c6040517f3ba88dbd00000000000000000000000000000000000000000000000000000000815260040161090c9190611543565b60405180910390fd5b610928338d610e2b90919063ffffffff16565b9150610a0d6001805461093a90611d52565b80601f016020809104026020016040519081016040528092919081815260200182805461096690611d52565b80156109b35780601f10610988576101008083540402835291602001916109b3565b820191906000526020600020905b81548152906001019060200180831161099657829003601f168201915b50505050508c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505084610e699092919063ffffffff16565b92503373ffffffffffffffffffffffffffffffffffffffff168d7f4ab486d2197ae1ef56ae95222694a4f9d334ec3da023d74bae2cf7242dfab5948d8d8d8d8d8d8d8d8c604051610a6699989796959493929190611dd9565b60405180910390a3509a509a98505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60025481565b6005602052816000526040600020602052806000526040600020600091509150505481565b813373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b7b5780336040517f55f541b9000000000000000000000000000000000000000000000000000000008152600401610b72929190611d83565b60405180910390fd5b6001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002081905550600160046000858152602001908152602001600020600001601a8282829054906101000a900461ffff16610c059190611e61565b92506101000a81548161ffff021916908361ffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16837f4e5aab67fb6878a7c5437d638d002992f2b503107c053f38483f6b294948749360405160405180910390a3505050565b610c70610d5f565b73ffffffffffffffffffffffffffffffffffffffff16610c8e610a7e565b73ffffffffffffffffffffffffffffffffffffffff1614610ce4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdb90611ae2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4a90611f0b565b60405180910390fd5b610d5c81610d67565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060610e3682610e9f565b610e3f466111aa565b84604051602001610e5293929190611f67565b604051602081830303815290604052905092915050565b6000828285604051602001610e8093929190611fc9565b6040516020818303038152906040528051906020012090509392505050565b606060008273ffffffffffffffffffffffffffffffffffffffff1660001b905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000602a67ffffffffffffffff811115610f1657610f15611623565b5b6040519080825280601f01601f191660200182016040528015610f485781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610f8057610f7f611ffa565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610fe457610fe3611ffa565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b601481101561119e5782600485600c846110309190611ca4565b6020811061104157611040611ffa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff16815181106110805761107f611ffa565b5b602001015160f81c60f81b826002836110999190611c21565b60026110a59190611ca4565b815181106110b6576110b5611ffa565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85600c846110f99190611ca4565b6020811061110a57611109611ffa565b5b1a60f81b1660f81c60ff168151811061112657611125611ffa565b5b602001015160f81c60f81b8260028361113f9190611c21565b600361114b9190611ca4565b8151811061115c5761115b611ffa565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061119690612029565b915050611016565b50809350505050919050565b6060600082036111f1576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611305565b600082905060005b6000821461122357808061120c90612029565b915050600a8261121c91906120a0565b91506111f9565b60008167ffffffffffffffff81111561123f5761123e611623565b5b6040519080825280601f01601f1916602001820160405280156112715781602001600182028036833780820191505090505b5090505b600085146112fe5760018261128a91906120d1565b9150600a856112999190612105565b60306112a59190611ca4565b60f81b8183815181106112bb576112ba611ffa565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856112f791906120a0565b9450611275565b8093505050505b919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113498261131e565b9050919050565b6113598161133e565b811461136457600080fd5b50565b60008135905061137681611350565b92915050565b60006020828403121561139257611391611314565b5b60006113a084828501611367565b91505092915050565b6000819050919050565b6113bc816113a9565b81146113c757600080fd5b50565b6000813590506113d9816113b3565b92915050565b6000602082840312156113f5576113f4611314565b5b6000611403848285016113ca565b91505092915050565b6114158161133e565b82525050565b600061ffff82169050919050565b6114328161141b565b82525050565b600063ffffffff82169050919050565b61145181611438565b82525050565b600060808201905061146c600083018761140c565b6114796020830186611429565b6114866040830185611448565b6114936060830184611429565b95945050505050565b6114a58161141b565b81146114b057600080fd5b50565b6000813590506114c28161149c565b92915050565b6114d181611438565b81146114dc57600080fd5b50565b6000813590506114ee816114c8565b92915050565b6000806040838503121561150b5761150a611314565b5b6000611519858286016114b3565b925050602061152a858286016114df565b9150509250929050565b61153d816113a9565b82525050565b60006020820190506115586000830184611534565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561159857808201518184015260208101905061157d565b838111156115a7576000848401525b50505050565b6000601f19601f8301169050919050565b60006115c98261155e565b6115d38185611569565b93506115e381856020860161157a565b6115ec816115ad565b840191505092915050565b6000602082019050818103600083015261161181846115be565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61165b826115ad565b810181811067ffffffffffffffff8211171561167a57611679611623565b5b80604052505050565b600061168d61130a565b90506116998282611652565b919050565b600067ffffffffffffffff8211156116b9576116b8611623565b5b6116c2826115ad565b9050602081019050919050565b82818337600083830152505050565b60006116f16116ec8461169e565b611683565b90508281526020810184848401111561170d5761170c61161e565b5b6117188482856116cf565b509392505050565b600082601f83011261173557611734611619565b5b81356117458482602086016116de565b91505092915050565b600080fd5b600080fd5b60008083601f84011261176e5761176d611619565b5b8235905067ffffffffffffffff81111561178b5761178a61174e565b5b6020830191508360018202830111156117a7576117a6611753565b5b9250929050565b6000806000806000806000806000806101008b8d0312156117d2576117d1611314565b5b60006117e08d828e016113ca565b9a505060208b013567ffffffffffffffff81111561180157611800611319565b5b61180d8d828e01611720565b99505060408b013567ffffffffffffffff81111561182e5761182d611319565b5b61183a8d828e01611758565b985098505060608b013567ffffffffffffffff81111561185d5761185c611319565b5b6118698d828e01611758565b9650965050608061187c8d828e016114b3565b94505060a061188d8d828e016114b3565b93505060c061189e8d828e016114df565b92505060e06118af8d828e016114df565b9150509295989b9194979a5092959850565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6118f6816118c1565b82525050565b600081519050919050565b600082825260208201905092915050565b6000611923826118fc565b61192d8185611907565b935061193d81856020860161157a565b611946816115ad565b840191505092915050565b600060408201905061196660008301856118ed565b81810360208301526119788184611918565b90509392505050565b600061198c8261131e565b9050919050565b61199c81611981565b82525050565b60006020820190506119b76000830184611993565b92915050565b6119c681611981565b81146119d157600080fd5b50565b6000813590506119e3816119bd565b92915050565b60008060408385031215611a00576119ff611314565b5b6000611a0e858286016119d4565b9250506020611a1f858286016113ca565b9150509250929050565b60008060408385031215611a4057611a3f611314565b5b6000611a4e858286016113ca565b9250506020611a5f858286016119d4565b9150509250929050565b600060208284031215611a7f57611a7e611314565b5b6000611a8d848285016119d4565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611acc602083611907565b9150611ad782611a96565b602082019050919050565b60006020820190508181036000830152611afb81611abf565b9050919050565b600081905092915050565b50565b6000611b1d600083611b02565b9150611b2882611b0d565b600082019050919050565b6000611b3e82611b10565b9150819050919050565b7f4661696c6564207472616e736665720000000000000000000000000000000000600082015250565b6000611b7e600f83611907565b9150611b8982611b48565b602082019050919050565b60006020820190508181036000830152611bad81611b71565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611bee82611438565b9150611bf983611438565b92508163ffffffff0483118215151615611c1657611c15611bb4565b5b828202905092915050565b6000611c2c826113a9565b9150611c37836113a9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c7057611c6f611bb4565b5b828202905092915050565b6000604082019050611c906000830185611534565b611c9d6020830184611534565b9392505050565b6000611caf826113a9565b9150611cba836113a9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611cef57611cee611bb4565b5b828201905092915050565b6000604082019050611d0f6000830185611429565b611d1c6020830184611448565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d6a57607f821691505b602082108103611d7d57611d7c611d23565b5b50919050565b6000604082019050611d986000830185611534565b611da56020830184611993565b9392505050565b6000611db88385611569565b9350611dc58385846116cf565b611dce836115ad565b840190509392505050565b600060e0820190508181036000830152611df4818b8d611dac565b90508181036020830152611e0981898b611dac565b9050611e186040830188611429565b611e256060830187611429565b611e326080830186611448565b611e3f60a0830185611448565b81810360c0830152611e518184611918565b90509a9950505050505050505050565b6000611e6c8261141b565b9150611e778361141b565b92508261ffff03821115611e8e57611e8d611bb4565b5b828201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ef5602683611907565b9150611f0082611e99565b604082019050919050565b60006020820190508181036000830152611f2481611ee8565b9050919050565b600081905092915050565b6000611f41826118fc565b611f4b8185611f2b565b9350611f5b81856020860161157a565b80840191505092915050565b6000611f738286611f36565b9150611f7f8285611f36565b9150611f8b8284611f36565b9150819050949350505050565b6000611fa38261155e565b611fad8185611b02565b9350611fbd81856020860161157a565b80840191505092915050565b6000611fd58286611f98565b9150611fe18285611f98565b9150611fed8284611f36565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612034826113a9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361206657612065611bb4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006120ab826113a9565b91506120b6836113a9565b9250826120c6576120c5612071565b5b828204905092915050565b60006120dc826113a9565b91506120e7836113a9565b9250828210156120fa576120f9611bb4565b5b828203905092915050565b6000612110826113a9565b915061211b836113a9565b92508261212b5761212a612071565b5b82820690509291505056fea2646970667358221220f40f7021fac8f6c859f364e8a885a78582444dfd602b96614dfcc2b33a4ae3f664736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestPolicy(uint256,string,bytes,bytes,uint16,uint16,uint32,uint32)": {
        "details": "consumer is responsible for making sure that these parameters line up withpolcy created on PRE SubscriptionManager"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1677,
        "contract": "contracts/v2/DKGSubscriptionManager.sol:DKGSubscriptionManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2404,
        "contract": "contracts/v2/DKGSubscriptionManager.sol:DKGSubscriptionManager",
        "label": "verifyingKey",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2406,
        "contract": "contracts/v2/DKGSubscriptionManager.sol:DKGSubscriptionManager",
        "label": "feeRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2408,
        "contract": "contracts/v2/DKGSubscriptionManager.sol:DKGSubscriptionManager",
        "label": "subscriptionNonce",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2413,
        "contract": "contracts/v2/DKGSubscriptionManager.sol:DKGSubscriptionManager",
        "label": "subscriptions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(SubscriptionConfig)2391_storage)"
      },
      {
        "astId": 2419,
        "contract": "contracts/v2/DKGSubscriptionManager.sol:DKGSubscriptionManager",
        "label": "consumers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(SubscriptionConfig)2391_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DKGSubscriptionManager.SubscriptionConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(SubscriptionConfig)2391_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(SubscriptionConfig)2391_storage": {
        "encoding": "inplace",
        "label": "struct DKGSubscriptionManager.SubscriptionConfig",
        "members": [
          {
            "astId": 2384,
            "contract": "contracts/v2/DKGSubscriptionManager.sol:DKGSubscriptionManager",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 2386,
            "contract": "contracts/v2/DKGSubscriptionManager.sol:DKGSubscriptionManager",
            "label": "dkgNodes",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2388,
            "contract": "contracts/v2/DKGSubscriptionManager.sol:DKGSubscriptionManager",
            "label": "endTimestamp",
            "offset": 22,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2390,
            "contract": "contracts/v2/DKGSubscriptionManager.sol:DKGSubscriptionManager",
            "label": "numConsumers",
            "offset": 26,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}